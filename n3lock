#!/bin/env bash

# default locations
configdir="${HOME}/.config/n3lock"
configfile="${configdir}/config.sh"
cachepath="${HOME}/.cache/n3lock"
pfppath="${HOME}/.pfp"
wallpath="${HOME}/.wallpaper"

# sizes
pfp_size="300"
half_pfp_size="$((pfp_size/2))"
img_size="${pfp_size}x${pfp_size}"
circle_width="2"
circle_radius="$((half_pfp_size-pfp_size/15))"
time_size="70"
date_size="70"
greeter_size="25"
layout_size="25"
pfp_outer_size="${half_pfp_size} ${half_pfp_size}"
pfp_border_radius="$half_pfp_size"
pfp_padding="0"

# screen
width="$(xrandr --query | grep ' connected' | grep -o '[0-9][0-9]*x[0-9][0-9]*[^ ]*' | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\1/' |cut -d "x" -f 1 |head -n1)"
height="$(xrandr --query | grep ' connected' | grep -o '[0-9][0-9]*x[0-9][0-9]*[^ ]*' | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\1/' |cut -d "x" -f 2 |head -n1)"
half_width="$(((width-pfp_size)/2))"
half_height="$(((height-pfp_size)/2))"

# general body position shift
shift_x="0"
shift_y="30"

# pfp container and image offset
offset_h="0+${shift_x}"
offset_v="200+${shift_y}"

# container offset
out_offset_h="0+${offset_h}"
out_offset_v="0-32+${offset_v}"

# inside image offset
# don't ask why but shift/5 aligns it with container
ins_offset_h="0+${offset_h}+$((shift_x/5))"
ins_offset_v="0+${offset_v}+$((shift_y/5))"

# keyboard layout indicator
layout_pad_x="50" # pad from horizontal screen edge
layout_pad_y="25" # pad from vertical screen edge

# positions
ind_pos="w/2+${out_offset_h}:h/2+${out_offset_v}"
time_pos="w/2+${shift_x}:h/2-100+${shift_y}"
date_pos="w/2+${shift_x}:h/2-30+${shift_y}"
greeter_pos="w/2+${shift_x}:h/2+${shift_y}"
layout_pos="w-${layout_pad_x}:${layout_pad_y}"

# colors
fg_color="999999ff"
wrong_color="aaaaaa66"
highlight_color="00000055"
verif_color="aaaaaa66"
inside_color="fefefe00"
separator_color="00000000"

# fonts
main_font="Abel"
msg_font="Lato"

# text
verif_text=""
wrong_text=""
noinput_text=""
greeter_cmd="date +'%b, %d'"
greeter_color="$fg_color"
verif_font="$msg_font"
wrong_font="$msg_font"
greeter_font="$msg_font"

# date and time
time_fmt="%H"
date_fmt="%M"
time_color="$fg_color"
date_color="$fg_color"
time_font="$main_font"
date_font="$main_font"

# keyboard layout
layout_mode="-1" # 0,1,2 (-1 to hide)
layout_color="$fg_color"
layout_font="$main_font"

# cache
pfp_crop="${cachepath}/pfp.png"
wallpaper_img="${cachepath}/wallpaper.png"
wallpaper_blur_img="${cachepath}/wallpaper_blur.png"
wallpaper_pfp_blur_img="${cachepath}/wallpaper_pfp_blur.png"

# init wallpaper
wallpaper="$2"

# source config
[ -f "$configfile" ] && . "$configfile"

# crop pfp
cropuser () {
  echo "Cropping user image ..."

  pfp_home="$pfppath"
  pfp_var="/var/lib/AccountsService/icons/${USER}"
	if [[ -d "$1" ]]; then
		pfp_home="$1"
	fi

  if [[ -f "$1" ]]; then
    userpic="$1"
  elif [[ -e "$pfp_home" ]]; then
    userpic="$pfp_home/*"
  	if [[ -f "$pfp_home" ]]; then
    	userpic="$pfp_home"
  	fi
  elif [[ -d "${configdir}/pfp" ]]; then
    userpic="${configdir}/pfp/*"
  elif [[ -e "$pfp_var" ]]; then
    userpic="$pfp_var"
  fi

	if [[ -n "$userpic" ]]; then
  	convert "$userpic" -resize "$img_size" -gravity Center \( \
    	-size "$img_size" xc:Black \
    	-fill White \
    	-draw "circle $pfp_outer_size $pfp_border_radius $pfp_padding" \
    	-alpha Copy \
    	\) -compose CopyOpacity -composite -trim "$pfp_crop"
  else
  	echo "No pfp found"
  fi
}

# crop wallpaper
cropbg () {
  echo "Cropping background ..."

  if [[ -n "${wallpaper}" ]] && [[ -n "${wallpaper_img}" ]]; then
    convert "$wallpaper" -resize "${width}x" -gravity center -crop "${width}x${height}+0+0" +repage \( \
          -size 120x140 xc:none \
          \) -gravity south -compose over -composite "${wallpaper_img}"
  fi
}

# blur wallpaper
blurbg () {
  echo "Blurring background ..."

  if [[ -f "${wallpaper_img}" ]] && [[ -n "${wallpaper_blur_img}" ]]; then
    convert "${wallpaper_img}" \
      -filter Gaussian \
      -blur 0x8 \
      "${wallpaper_blur_img}"
  fi
}

# generate cached wallpaper
genbg () {
  echo "Caching background ..."

  if [[ ! -d "${HOME}/.cache/n3lock" ]]; then
    mkdir "${HOME}/.cache/n3lock"
  fi

  if [ ! -f "$1" ] && [ -d "$wallpath" ]; then
    wallpaper="${wallpath}/*"
  elif [[ -d "${configdir}/wallpaper" ]]; then
    userpic="${configdir}/wallpaper/*"
  fi

  cropbg
  blurbg

  if [[ -f "${pfp_crop}" ]] && [[ -f "${wallpaper_blur_img}" ]]; then
    composite -geometry "+$(((half_width)+(ins_offset_h)))+$(((half_height)+(ins_offset_v)))" "${pfp_crop}" "${wallpaper_blur_img}" "${wallpaper_pfp_blur_img}"
  fi

  echo "Finished caching image"
}

# lock screen
lockscreen () {
  # check if cache exists
  [ -f "${wallpaper_img}" ] &&
    image_cmd="${wallpaper_img}"
  [ -f "${wallpaper_pfp_blur_img}" ] &&
    image_cmd="${wallpaper_pfp_blur_img}"
  [ -n "$image_cmd" ] &&
    image_param="-i"
  # set greeting msg
  greet="$(eval "$greeter_cmd")"

  i3lock -n --force-clock "$image_param" "$image_cmd" \
  --ind-pos="$ind_pos" --time-pos="$time_pos" --date-pos="$date_pos" --greeter-pos="$greeter_pos" --layout-pos="$layout_pos" \
  --insidever-color="$verif_color" --insidewrong-color="$wrong_color" --inside-color="$inside_color" \
  --ringver-color="$verif_color" --ringwrong-color="$wrong_color" --ring-color="$fg_color" \
  --keyhl-color="$highlight_color" --bshl-color="$highlight_color" --separator-color="$separator_color" \
  --date-color="$date_color" --time-color="$time_color" --greeter-color="$greeter_color" --layout-color="$layout_color" \
  --time-str="$time_fmt" --time-size="$time_size" \
  --date-str="$date_fmt" --date-size="$date_size" \
  --greeter-text="$greet" --greeter-size="$greeter_size" \
  --keylayout "$layout_mode" --layout-size="$layout_size" \
  --line-uses-inside --radius "$circle_radius" --ring-width "$circle_width" --indicator \
  --verif-text="$verif_text" --wrong-text="$wrong_text" --noinput-text="$noinput_text" \
  --clock --date-font="$date_font" --time-font="$time_font" --layout-font="$layout_font" \
  --verif-font="$verif_font" --wrong-font="$wrong_font" --greeter-font="$greeter_font" \
  "$custom_cmd" "$cmd_1_option" "$cmd_1" \
  "$cmd_2_option" "$cmd_2" \
  "$cmd_3_option" "$cmd_3" \
  "$cmd_4_option" "$cmd_4" \
  "$cmd_5_option" "$cmd_5" \
  "$cmd_6_option" "$cmd_6" \
  "$cmd_7_option" "$cmd_7" \
  "$cmd_8_option" "$cmd_8" \
  "$cmd_9_option" "$cmd_9" \
  $args &
}

# run exit actions
quit () {
  case $2 in
    -*)
      shift 1 || exit 1 ;;
    *)
      shift 2 || exit 1 ;;
  esac

  exec "$0" "$@"
}

# show usage
show_help () {
  cat << EOF
USAGE
  n3lock [OPTION]

DESCRIPTION
  n3lock with no option shows lockscreen with default configuration.

CONFIGURATION
  Default config dir value is ${configdir}.

  Default config file is located at ${configdir}/config.sh. You can specify a custom config with -c|--config path/to/config.

  With -p and -w IMAGE can be omitted and n3lock will look for the first file in ${HOME}/.pfp or ${configdir}/pfp and ${HOME}/.wallpaper or ${configdir}/wallpaper respectively and in this order. The default directory for each can be overridden by setting \`pfppath\` and \`wallpath\` variables respectively in the config file.

OPTIONS
  Mandatory arguments to long options are mandatory for short options as well.

  -p|--pfp [IMAGE]       Generate pfp image cache
  -w|--wallpaper [IMAGE] Generate wallpaper cache
  -c|--config CONFIG     Use config file CONFIG
  -h|--help              Show this help message
EOF
}

# parse args
case $1 in
  -p|--pfp)
    cropuser "$2"
    quit "$@" ;;
  -w|--wallpaper)
    genbg "$2"
    quit "$@" ;;
  -h|--help)
    show_help
    exit ;;
  -c|--config)
    . "$2" ;;
  -*)
    echo "Unknown option: $1" ;
    exit 1 ;;
esac

# run lock screen
lockscreen
